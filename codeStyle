// source https://habr.com/post/149210/

1) Новая функция и отступы
Между разными функциями обычно ставят пустую строку. 
Но для мозга это потенциально избыточная информация: 
перед новой функцией идет строка с закрывающей угловой скобкой, ее можно рассматривать
как пустую. И эта закрывающая скобка идет без лишних отступов. 
Новый блок (функция) тоже идет без лишних отступов.
//С++ обычный
	return 1;
}

int f() {
	return 0;
}
//С++ без пустой строки
	return 1;
}
int f() {
	return 0;
}

2) Комментарии
/*многострочный комментарий
неправильно
*/
/* многострочный комментарий
правильно */
Код читается намного чаще, чем пишется. Поэтому удобство написания (не следить за */) менее важно,
чем удобство чтения. Чтобы понять, что комментарий кончился, мозгу достаточно расцветки кода, 
а */ на новой пустой строке совсем не нужны. Если нужны, то достаточно переучиться, и потребность пропадет. 

3) Пустая строка в начале функции
Начало функции или другого блока итак хорошо видно — хотя бы по уровню отступа. 
И строки внутри функции имеют дополнительный отступ. Поэтому (после переобучения) пустая строка 
после начала функции не нужна.
//устаревший стиль
int f()
{
	return 0;
}
//правильно
int f() {
	return 0;
}

4) Комментарии начала файла
В первом комментарии обычно ставится имя файла, имя создателя и лицензия. 
По возможности, имя файла и имя создателя переводится на первую строку, и лицензия
ужимается до одной строки вместо копирования целого абзаца.
//file.cpp by AuthorName
//This file is licensed under GPL, www.gnu.org/copyleft/gpl.html

5) Имена
Как принято в Java/Qt: ClassName, functionName. Плохо: function_name — ведь дольше набирать,
тянуть палец к далеко расположенной клавише подчеркивания, дольше читать, мозгу сложнее
окинуть имя сразу одним взглядом (вместо прочтения длинного слова по частям с переводом
взгляда чуть правее), как рекомендуется в техниках обучения быстрому чтению. 
«Программный апгрейд» (привычка к другому стилю кода) важен, потому что физически проапгрейдить
глаза затруднительно (чтобы они быстрее двигались в горизонтальной плоскости).

6) Плюс в начале строки
     int a = very_long_expression1_length1 +
             very_long_expression2_length2__test_lol +
             very_long_expression3_lol;
или же:
     int a = very_long_expression1_length1 
             + very_long_expression2_length2__test_lol 
             + very_long_expression3_lol;
 В первом случае нужно дочитывать предыдущую строку до конца, чтобы понять, что выражение
 относится к ней. И это бывает сложно, когда длина выражений различается. Да еще и не очень-то и аккуратно.
           
7) Стили проекта
Мой опыт показывает, что во всех проектах стили в чем-то да отличаются. 
И вообщем-то у проекта должен быть свой coding style, который излагается на wiki-проекта или в pdf'ке. 
Кроме того, тем кто использует разные стили в одном проекте — руки отрывать надо.

8) Привычки
Привычки меняются, их надо перепросматривать, а к выбору подходить рационально.

https://habr.com/post/172091/

Di_Zed 24 марта 2013 в 14:23
90 рекомендаций по стилю написания программ на C++
http://geosoft.no/development/cppstyle.html
    Перевод
1 Введение

Настоящий документ содержит рекомендации по написанию программ на языке C++.
Рекомендации основаны на установившихся стандартах, собранных из различных источников, личного опыта, частных требований и потребностей определённых проектов, а также почерпнутых из источников (см. ниже).

Но для появления ещё одного списка рекомендаций, помимо указанных источников, есть несколько причин. Основная причина — их излишняя обобщённость, поскольку зачастую требуется задать частные правила (в особенности правила именования). Данный документ содержит комментарии, что делает его более удобным в использовании при проведении ревизий кода, чем другие уже существующие документы. К тому же, рекомендации по программированию обычно вперемешку содержат описания проблем стиля и технических проблем, что не совсем удобно. Этот документ не содержит каких-либо технических рекомендаций по C++, делая упор на вопросах стиля.

Имеющиеся среды разработки могут улучшить читаемость кода с помощью отображения модификаторов доступа, подсветки кода, автоматического форматирования и прочего, но программисту не следует полагаться на эти инструменты. Исходный код должен рассматриваться не только в рамках используемой среды разработки и должен быть написан так, чтобы максимально улучшить читаемость независимо от среды.

1.1 Формат документа

Рекомендации сгруппированы по темам и пронумерованы, чтобы на них можно было ссылаться во время ревизий кода.

Рекомендации отображаются следующим образом:

n. Короткое описание рекомендации.

// Пример кода (если возможно)

Объяснение, происхождение и дополнительная информация.

Комментарии к рекомендациям особенно важны, поскольку стандарты написания кода и гайдлайны обычно разжигают «холивары», и важным моментом является объяснение рекомендации.

1.2 Важность рекомендаций

Рекомендации разделены по степени важности: обязательные, настоятельно рекомендуемые и общие.

2 Общие рекомендации

1. Допускаются любые нарушения рекомендаций, если это улучшает читаемость.

Основная цель рекомендаций — улучшение читаемости и, следовательно, ясности и лёгкости поддержки, а также общего качества кода. Невозможно дать рекомендации на все случаи жизни, поэтому программист должен мыслить гибко.

2. Правила могут быть нарушены, если против них есть персональные возражения.

Это попытка создать набор общих рекомендаций, не навязывая всем единый стиль. Опытные программисты обычно всё равно подгоняют стиль под себя. Подобный список рекомендаций, имеющийся под рукой (или хотя бы требование ознакомиться с ним), обычно заставляет людей задумываться о стиле программирования и оценке их собственных практик в этой области.

С другой стороны, новички и неопытные программисты обычно используют рекомендации по стилю для лучшего понимания жаргона программистов.

3 Соглашения об именовании

3.1 Общие соглашения об именовании

3. Имена, представляющие типы, должны быть обязательно написаны в смешанном регистре, начиная с верхнего.

Line, SavingsAccount


Общая практика в сообществе разработчиков C++.

4. Имена переменных должны быть записаны в смешанном регистре, начиная с нижнего.

line, savingsAccount


Общая практика в сообществе разработчиков C++. Позволяет легко отличать переменные от типов, предотвращает потенциальные коллизии имён, например: Line line;

5. Именованные константы (включая значения перечислений) должны быть записаны в верхнем регистре с нижним подчёркиванием в качестве разделителя.

MAX_ITERATIONS, COLOR_RED, PI


Общая практика в сообществе разработчиков C++. Использование таких констант должно быть сведено к минимуму. В большинстве случаев реализация значения в виде метода — лучшее решение:

  int getMaxIterations() // НЕЛЬЗЯ: MAX_ITERATIONS = 25
  {
    return 25;
  }


Эта форма более читаемая и гарантирует единый интерфейс к значениям, хранящимся в классе.
